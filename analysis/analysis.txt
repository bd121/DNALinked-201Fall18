Brian Du
bd121

StringStrand:
dna length = 4.639.221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4.800.471	1,144	1290
StringStrand:	            512	      4.965.591	1,191	1290
StringStrand:	          1.024	      5.295.831	1,200	1290
StringStrand:	          2.048	      5.956.311	1,418	1290
StringStrand:	          4.096	      7.277.271	1,722	1290
StringStrand:	          8.192	      9.919.191	2,299	1290
StringStrand:	         16.384	     15.203.031	3,900	1290
StringStrand:	         32.768	     25.770.711	6,548	1290
StringStrand:	         65.536	     46.906.071	12,177	1290
StringStrand:	        131.072	     89.176.791	24,507	1290
StringStrand:	        262.144	    173.718.231	47,143	1290
StringStrand:	        524.288	    342.801.111	87,241	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at StringStrand.append(StringStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:67)
	at DNABenchmark.main(DNABenchmark.java:113)

StringBuilderStrand:
dna length = 4.639.221
cutting at enzyme gaattc
-----
Class	                       splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4.800.471	0,056	1290
StringBuilderStrand:	            512	      4.965.591	0,048	1290
StringBuilderStrand:	          1.024	      5.295.831	0,011	1290
StringBuilderStrand:	          2.048	      5.956.311	0,011	1290
StringBuilderStrand:	          4.096	      7.277.271	0,014	1290
StringBuilderStrand:	          8.192	      9.919.191	0,026	1290
StringBuilderStrand:	         16.384	     15.203.031	0,016	1290
StringBuilderStrand:	         32.768	     25.770.711	0,026	1290
StringBuilderStrand:	         65.536	     46.906.071	0,080	1290
StringBuilderStrand:	        131.072	     89.176.791	0,159	1290
StringBuilderStrand:	        262.144	    173.718.231	9,536	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3744)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:146)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:512)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:141)
	at StringBuilderStrand.append(StringBuilderStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.lambda$0(DNABenchmark.java:76)
	at DNABenchmark$$Lambda$142/29183965.run(Unknown Source)
	at java.base/java.lang.Thread.run(Thread.java:844)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:79)
	at DNABenchmark.main(DNABenchmark.java:113)

LinkStrand:
dna length = 4.639.221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
11111111LinkStrand:	       256	      4.800.471	0,038	1290
1111LinkStrand:	            512	      4.965.591	0,029	1290
1111LinkStrand:	          1.024	      5.295.831	0,008	1290
1111LinkStrand:	          2.048	      5.956.311	0,009	1290
1111LinkStrand:	          4.096	      7.277.271	0,008	1290
1111LinkStrand:	          8.192	      9.919.191	0,007	1290
1111LinkStrand:	         16.384	     15.203.031	0,009	1290
1111LinkStrand:	         32.768	     25.770.711	0,008	1290
1111LinkStrand:	         65.536	     46.906.071	0,008	1290
1111LinkStrand:	        131.072	     89.176.791	0,024	1290
1111LinkStrand:	        262.144	    173.718.231	0,011	1290
1111LinkStrand:	        524.288	    342.801.111	0,009	1290
1111LinkStrand:	      1.048.576	    680.966.871	0,008	1290
1111LinkStrand:	      2.097.152	  1.357.298.391	0,008	1290
1111LinkStrand:	      4.194.304	  2.709.961.431	0,010	1290
1111LinkStrand:	      8.388.608	  5.415.287.511	0,007	1290
1111LinkStrand:	     16.777.216	 10.825.939.671	0,016	1290
1111LinkStrand:	     33.554.432	 21.647.243.991	0,009	1290
1111LinkStrand:	     67.108.864	 43.289.852.631	0,022	1290
1111LinkStrand:	    134.217.728	 86.575.069.911	0,009	1290
1111LinkStrand:	    268.435.456	173.145.504.471	0,013	1290
1111LinkStrand:	    536.870.912	346.286.373.591	0,011	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3744)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:146)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:512)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:141)
	at DNABenchmark.main(DNABenchmark.java:110)

Question 1: are the benchmark timings for StringStrand consistent with the explanation below that the time to
execute cutAndSplice is O(b2S)? 
Note that the value of b is half the number of calls to append since each cut (except the first) is modeled
by two calls of append in the method cutAndSplice -- see the code. This means that b2 will be constant in
the benchmark, but S will vary. 

The benchmark times for StringStrand are consistent with expected for O((b^2)s). B is kept constant
in benchmark (since the number of append calls remains constant) so that only s is changing, so time
should increase linearly with s, which it does. 

Question 2: are the benchmark timings for StringBuilderStrand consistent with the explanation below that
the time to execute cutAndSplice is O(bS)? 
Note that the value of b is half the number of calls to append since each cut (except the first) is modeled 
by two calls of append in the method cutAndSplice -- see the code. This means that b will be constant in the 
benchmark, but s will vary. 
Yes, the benchmark times for StringStrand are consistent with expected for O(bs); b will be constant in the 
benchmark, but s will vary. In this case, time taken should increase linearly as well as s increases, and
that is the trend observed in benchmark runtime data.


Question 3: Explain why the time for LinkStrand does not change much at all over all the runs in the benchmark 
program. Explain why you think memory is exhausted at the specific strand size you see in your timings -- as 
compared to exhaustion for String and StringBuilder.

It stays constant across the benchmark runs because the runtime order of LinkStrand is not dependent on how
long the splicee is. No matter how long the splicee strand is, they are made ready and added at constant time.
 